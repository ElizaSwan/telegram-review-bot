import os
import logging
import asyncio
import sqlite3
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print("=" * 60)
print("üîç –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ó .env:")
print(f"‚úÖ TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}")
print(f"‚úÖ YANDEX_API_KEY: {YANDEX_API_KEY}")
print(f"‚úÖ YANDEX_FOLDER_ID: {YANDEX_FOLDER_ID}")
print("=" * 60)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç—ã –∏–∑ telegram (–ü–û–°–õ–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!)
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from yagpt_client import yagpt_client
import keyboards as kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GENDER, SERVICE, LIKES, COMMENT, RECOMMENDATION, FINAL_CONFIRMATION = range(6)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class DatabaseManager:
    def __init__(self, db_path='reviews.db'):
        self.db_path = db_path
    
    def init_database(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user_name TEXT,
                gender TEXT,
                service TEXT,
                likes TEXT,
                recommendation TEXT,
                comment TEXT,
                generated_review TEXT,
                date_created DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
    
    def save_review(self, user_id, user_name, gender, service, likes, recommendation, comment, generated_review):
        likes_json = json.dumps(likes, ensure_ascii=False)
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO reviews (user_id, user_name, gender, service, likes, recommendation, comment, generated_review)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, user_name, gender, service, likes_json, recommendation, comment, generated_review))
        conn.commit()
        conn.close()

db_manager = DatabaseManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()

    # –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –æ—Ç–∑—ã–≤–æ–≤! üíñ*\n\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã.\n\n"
    "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )

    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await asyncio.sleep(1)
    await update.message.reply_text(
        "üë• –ö–∞–∫–æ–≥–æ –≤—ã –ø–æ–ª–∞?",
        reply_markup=kb.get_gender_keyboard()
    )
    return GENDER

async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    valid_genders = ['üë© –ñ–µ–Ω—Å–∫–∏–π', 'üë® –ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–ú—É–∂—Å–∫–æ–π']

    if user_answer not in valid_genders:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üëá",
            reply_markup=kb.get_gender_keyboard()
        )
        return GENDER

    context.user_data['gender'] = user_answer
    await update.message.reply_text(
        "üè¢ –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã –ø–æ–ª—É—á–∏–ª–∏?",
        reply_markup=kb.get_service_keyboard()
    )
    return SERVICE

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    valid_services = ['–°–¥–∞—á–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∞—Ä–µ–Ω–¥—É', '–°—ä—ë–º –∫–≤–∞—Ä—Ç–∏—Ä—ã', '–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã', 
                     '–ü–æ–∫—É–ø–∫–∞ –¥–æ–º–∞', '–ü—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã', '–ü—Ä–æ–¥–∞–∂–∞ –¥–æ–º–∞', 
                     '–§–ª–∏–ø–ø–∏–Ω–≥', '–•–æ—É–º—Å—Ç–µ–π–¥–∂–∏–Ω–≥', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏']

    if user_answer not in valid_services:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üëá",
            reply_markup=kb.get_service_keyboard()
        )
        return SERVICE

    context.user_data['service'] = user_answer
    context.user_data['likes'] = []

    await update.message.reply_text(
        "‚≠ê –ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—à–∏–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º?\n\n"
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=kb.get_likes_keyboard()
    )
    return LIKES

async def handle_likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    valid_likes = ['–°–∫–æ—Ä–æ—Å—Ç—å', '–í–µ–∂–ª–∏–≤–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∞', 
                  '–¶–µ–Ω–∞', '–°—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä']

    if user_answer not in valid_likes:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ üëá",
            reply_markup=kb.get_likes_keyboard()
        )
        return LIKES

    if user_answer == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä':
        if not context.user_data['likes']:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º üëá",
                reply_markup=kb.get_likes_keyboard()
            )
            return LIKES

        await update.message.reply_text(
            "üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫ –æ—Ç–∑—ã–≤—É?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=kb.get_skip_keyboard()
        )
        return COMMENT

    if user_answer in context.user_data['likes']:
        context.user_data['likes'].remove(user_answer)
        action = "—É–±—Ä–∞–Ω–æ"
    else:
        context.user_data['likes'].append(user_answer)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"

    selected_text = ", ".join(context.user_data['likes']) if context.user_data['likes'] else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

    await update.message.reply_text(
        f"{user_answer} {action} ‚úÖ\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {selected_text}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
        reply_markup=kb.get_likes_keyboard()
    )
    return LIKES

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text

    if user_answer == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        context.user_data['comment'] = ""
    else:
        context.user_data['comment'] = user_answer

    await update.message.reply_text(
        "ü§ù –ü–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –Ω–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ?",
        reply_markup=kb.get_recommendation_keyboard()
    )
    return RECOMMENDATION

async def handle_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text

    if user_answer not in ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ üëá",
            reply_markup=kb.get_recommendation_keyboard()
        )
        return RECOMMENDATION

    context.user_data['recommendation'] = user_answer

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    summary_text = "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    summary_text += f"üë• –ü–æ–ª: {context.user_data['gender']}\n"
    summary_text += f"üè¢ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
    summary_text += f"‚≠ê –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {', '.join(context.user_data['likes'])}\n"
    if context.user_data.get('comment'):
        summary_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data['comment']}\n"
    summary_text += f"ü§ù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {context.user_data['recommendation']}\n\n"
    summary_text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"

    await update.message.reply_text(
        summary_text,
        reply_markup=kb.get_confirmation_keyboard()
    )
    return FINAL_CONFIRMATION

async def handle_final_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text

    if user_answer not in ['‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ', '‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å']:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ üëá",
            reply_markup=kb.get_confirmation_keyboard()
        )
        return FINAL_CONFIRMATION

    if user_answer == '‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ':
        await update.message.reply_text(
            "‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –æ—Ç–∑—ã–≤ —Å –ø–æ–º–æ—â—å—é AI...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 10-15 —Å–µ–∫—É–Ω–¥.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ —Å –ø–æ–º–æ—â—å—é YaGPT
        generated_review = await yagpt_client.generate_review(
            context.user_data['gender'],
            context.user_data['service'],
            context.user_data['likes'],
            context.user_data['recommendation'],
            context.user_data.get('comment', '')
        )

        # Fallback –µ—Å–ª–∏ YaGPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not generated_review:
            generated_review = (
                f"–•–æ—á—É –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å Demyanov realty –∑–∞ {context.user_data['service'].lower()}! "
                f"–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {', '.join(context.user_data['likes'])}. "
                f"{'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ!' if context.user_data['recommendation'] == '‚úÖ –î–∞' else '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!'}"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        user_id = update.message.from_user.id
        user_name = update.message.from_user.username or update.message.from_user.first_name

        db_manager.save_review(
            user_id, user_name,
            context.user_data['gender'],
            context.user_data['service'],
            context.user_data['likes'],
            context.user_data['recommendation'],
            context.user_data.get('comment', ''),
            generated_review
        )

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        final_message = (
            f"üéâ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –æ—Ç–∑—ã–≤:\n\n"
            f"`{generated_review}`\n\n"
            f"üíñ –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.\n\n"
            f"**üöÄ –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–∑—ã–≤ –Ω—É–∂–Ω–æ –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!** üòä\n\n"
            f"üìã *–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:*\n\n"
            f"1. üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Å—Ç–æ—è–ª–∞—Å—å —Å–¥–µ–ª–∫–∞\n"
            f"2. üîç –ù–∞–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–Ω–æ–ø–∫—É \"–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤\"\n"  
            f"3. üîê –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
            f"4. üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–∫–æ—à–∫–æ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –æ—Ç–∑—ã–≤\n\n"
            f"**‚≠êÔ∏è –ï—â—ë —Ä–∞–∑ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å!** üôè"
        )

        await update.message.reply_text(
            final_message,
            parse_mode='Markdown',
            reply_markup=kb.get_platform_keyboard()
        )

        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ /start"
        )

    else:
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start")

    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–∑–∂–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YaGPT"""
    test_review = await yagpt_client.generate_review(
        "üë© –ñ–µ–Ω—Å–∫–∏–π", "–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", ["–°–∫–æ—Ä–æ—Å—Ç—å"], "‚úÖ –î–∞", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    )

    if test_review:
        await update.message.reply_text(f"‚úÖ YaGPT —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n{test_review}")
    else:
        await update.message.reply_text("‚ùå YaGPT –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not all([TELEGRAM_BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
        logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.error(f"Telegram Token: {'SET' if TELEGRAM_BOT_TOKEN else 'MISSING'}")
        logger.error(f"Yandex API Key: {'SET' if YANDEX_API_KEY else 'MISSING'}")
        logger.error(f"Yandex Folder ID: {'SET' if YANDEX_FOLDER_ID else 'MISSING'}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager.init_database()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gender)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_service)],
            LIKES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_likes)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
            RECOMMENDATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_recommendation)],
            FINAL_CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_final_confirmation)]
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('test', test_command)]
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
